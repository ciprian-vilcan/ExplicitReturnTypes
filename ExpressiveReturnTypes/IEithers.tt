<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    IEnumerable<string> lvl1Indent = new[]
    {
        "using System;",
		Environment.NewLine
    };

    var interfaceDefinitions = Enumerable.Range(1, 16).Select(
        i =>
            {
                var lvl2Indent =
                    new[] { "/// <summary>" + "/// Does pattern matching based on the real underlying type.", "/// </summary>", }
                        .Concat(this.GetMatchParameters(i))
                        .Concat(
                            new[]
                                {
                                    "/// <typeparam name=\"TResult\"> The type of result. </typeparam>",
                                    "/// <returns> The <see cref=\"TResult\"/>. </returns>"
                                }).Concat(new[] { this.GetMatchHeader(i) }).Select(row => IncreaseIndent(row, 2));

                return 
                    new[]
                            {
                                @"/// <summary>",
                                @"/// Defines the contract for data types that will act as an exclusive or (XOR) discriminated unions.",
                                @"/// </summary>",
                            }.Concat(this.GetTypeParamDocumentation(i)).Concat(new[] { this.GetInterfaceHeader(i), "{" })
                        .Concat(lvl2Indent).Concat(new[] { "}" });
            })
        .Aggregate((left, right) => left.Concat(new[] { "" }.Concat(right)));

    var lines = new Section(
        new[]
            {
                "// <auto-generated />",
                "namespace ExpressiveReturnTypes",
                "{",

                IncreaseIndent(new Section(lvl1Indent.Concat(interfaceDefinitions)).ToString(), 1), 
                "}"
            });
    Write(lines.ToString());
#>
<#@ include file="T4Indentation.ttinclude" #>
<#+
    private IEnumerable<string> GetTypeParamDocumentation(int numberOfOptions)
    {
        return Enumerable.Range(1, numberOfOptions).Select(i => $"/// <typeparam name=\"T{i}\"> Option {i}. </typeparam>");
    }

    private string GetInterfaceHeader(int numberOfOptions)
    {
        return $"public interface IEither<{Enumerable.Range(1, numberOfOptions).Select(i => $"out T{i}").Aggregate((left, right) => $"{left}, {right}")}>";
    }

    private IEnumerable<string> GetMatchParameters(int numberOfOptions)
    {
        return Enumerable.Range(1, numberOfOptions).Select(
            i => $"/// <param name=\"func{i}\"> The func to be executed in case the type is option {i}. </param>");
    }

    private string GetMatchHeader(int numberOfOptions)
    {
        return
            $"TResult Match<TResult>({Enumerable.Range(1, numberOfOptions).Select(i => $"Func<T{i}, TResult> func{i}").Aggregate((left, right) => $"{left}, {right}")});";
    }

    private class Section
    {
        public Section(IEnumerable<string> sections)
        {
            this.Sections = sections;
        }

        public IEnumerable<string> Sections { get; }

        public override string ToString() => this.Sections.Aggregate((left, right) => $"{left}{Environment.NewLine}{right}");
    }
#>
